[tool.poetry]
name = "etendo-copilot-core"
version = "0.1.0"
description = ""
authors = ["sebastianbarrozo <sebastian.barrozo@etendo.software>"]
readme = "README.md"
packages = [{include = "copilot"}]

[tool.poetry.dependencies]
python = "^3.10"
transformers = {extras = ["agents"], version = "^4.29.2"}
openai = "^0.27.7"
torch = {version = "2.0.1", source = "torchcpu201"}
python-dotenv = "^1.0.0"
pydantic = "^2.2.1"
fastapi = "^0.103.0"
uvicorn = "^0.23.2"
flask-wtf = "^1.1.1"
pycountry = "^22.3.5"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
ipython = "^8.14.0"
httpx = "^0.24.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.extras]
runtime = ["torch"]

[[tool.poetry.source]]
name = "torchcpu201"
url = "https://download.pytorch.org/whl/cpu/"
priority = "explicit"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.black]
line-length = 110
exclude = '''
/(
    \.git
  | \.hg
  | \.sh
  | \.mypy_cache
  | \.venv
  | Dockerfile
  | _build
  | build
  | dist
)/
'''

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]


[tool.ruff.isort]
known-third-party = ["copilot"]
