import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.gradle.internal.resource.transport.http.HttpRequestException
import org.gradle.api.plugins.ExtraPropertiesExtension
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

final String TRUE = 'true'
final String SH = 'sh'
final String DASH_C = '-c'
final String COPILOT = 'copilot'
final String MODULES_PROJECT = "modules"
final String COPILOT_MODULE = "com.etendoerp.copilot"
final String ARG_PROPERTY = "arg"
final String COPILOT_PORT_PROPERTY = "COPILOT_PORT"
final String OPENAI_API_KEY_PROPERTY = "OPENAI_API_KEY"
final String COPILOT_DOCKER_REPO = "etendo_copilot_core"
final String TOOLS_CONFIG_FILE = "tools_config.json"
final String COPILOT_IMAGE_TAG = 'COPILOT_IMAGE_TAG'
final String COPILOT_PULL_IMAGE = 'COPILOT_PULL_IMAGE'
final String COPILOT_DOCKER_CONTAINER_NAME = 'COPILOT_DOCKER_CONTAINER_NAME'
final String DEPENDENCIES_TOOLS_FILENAME = 'DEPENDENCIES_TOOLS_FILENAME'
final String BASE_MODULE_DIR = "modules"

final String EQUAL = '='

def jarsDir = new File(projectDir, "build${File.separator}etendo${File.separator}modules")
def sourceDir = new File(projectDir, "modules")

ext.sharedPrompt = ""
ext.errorMsg = null

private Iterable<File> processPropertiesFiles(File dir) {
    fileTree(dir: dir).matching {
        include '**/gradle.properties'
    }.each { file ->
        Properties properties = new Properties()
        file.withInputStream { stream ->
            properties.load(stream)
        }
        properties.each { key, value ->
            if (key.toString().startsWith('copilot.')) {
                tasks.create(name: key, group: 'copilot') {
                    finalizedBy 'copilot.do'
                    doLast {
                        sharedPrompt = value
                        for (def i = 0; i < 10; i++) {
                            String arg = "arg";
                            if (i > 0) {
                                arg = 'arg' + i
                            }
                            if (sharedPrompt.contains(arg)) {
                                if (!project.hasProperty(arg)) {
                                    errorMsg = "ðŸ¤– Please provide the parameter: " + arg + " (Ex. -P" + arg + "=value)"
                                    sharedPrompt = null
                                    return
                                }
                                sharedPrompt = value.replace('{' + arg + '}', project.findProperty(arg))
                            }
                        }
                    }
                }
            }
        }
    }
}

private String getToolsDependenciesFileName(Project project) {
    String toolsDependenciesFile = 'tools_deps.toml'
    try {
        Properties properties = envFile().properties
        String toolsDependenciesFileProp = properties.getOrDefault(DEPENDENCIES_TOOLS_FILENAME, toolsDependenciesFile).toString()
        String result = toolsDependenciesFileProp.isEmpty() ? toolsDependenciesFile : toolsDependenciesFileProp
        project.logger.info("Loaded TOOLS_DEPENDENCIES_FILE: ${result}")
    } catch (Exception e) {
        project.logger.info("Loaded TOOLS_DEPENDENCIES_FILE using default value: ${toolsDependenciesFile}")
        return toolsDependenciesFile
    }
}

processPropertiesFiles(jarsDir)
processPropertiesFiles(sourceDir)

task 'copilot.do' {
    doLast {
        project.logger.lifecycle("ðŸ¤– ðŸ‘‹ Hello Human!")
        if (sharedPrompt == null || sharedPrompt == "") {
            if (!project.findProperty("prompt")) {
                if (errorMsg != null) {
                    project.logger.error(errorMsg)
                } else {
                    project.logger.lifecycle("ðŸ¤– Please provide the parameter: prompt (Ex. -Pprompt=\"How are you?\")")
                }
                return
            }
            sharedPrompt = project.findProperty("prompt")
        }
        project.logger.lifecycle("ðŸ¤– I'm working on your request: $sharedPrompt")
        String translationURL = "http://0.0.0.0:${project.ext.get(COPILOT_PORT_PROPERTY)}/question"

        HttpClient client = HttpClient.newHttpClient()
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(translationURL))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString("{\"question\":\"${sharedPrompt}\"}"))
                .build()

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString())
        int httpCode = response.statusCode()
        String responseBody = response.body()

        if (httpCode >= 400) {
            throw new HttpRequestException("* Task failed with status code ${httpCode}: ${responseBody}", null)
        } else {
            var responseJson = new groovy.json.JsonSlurper().parseText(responseBody)
            project.logger.lifecycle("ðŸ¤– " + responseJson.answer)
            project.logger.lifecycle("ðŸ¤– Glad to help you! ðŸ˜ƒ")
        }
    }
}

task 'copilot.build' {
    // this task will run after the copilot.env.file task, if i want to execute before i can use finalizedBy
    doLast {
        project.logger.info("ðŸ¤– Executing Copilot Configuration Loader")
        File copilotDir = new File(project.buildDir.path, COPILOT)
        copilotDir.deleteDir()

        boolean copilotExists = false
        Project moduleProject = project.findProject(":${BASE_MODULE_DIR}")
        File jarModulesLocation = new File(project.buildDir, "etendo" + File.separator + MODULES_PROJECT)
        File copilotJarModule = new File(jarModulesLocation, COPILOT_MODULE)
        Project copilotProject = null
        if (moduleProject != null) {
            copilotProject = moduleProject.findProject(COPILOT_MODULE)
        }

        if (copilotProject != null || copilotJarModule.exists()) {
            copilotExists = true
            def sourcePath = copilotProject != null ? copilotProject.projectDir.path : copilotJarModule.path
            int counter = 0

            project.copy {
                from sourcePath
                into "${project.buildDir.path}${File.separator}copilot"
                includeEmptyDirs false
                exclude "**/.git/**"
                exclude "**/node_modules/**"
                exclude "**/.venv/**"
                eachFile { fileCopyDetails ->
                    counter++
                    project.logger.info("Copiando archivo Copilot ${counter}: ${fileCopyDetails.file.path}")
                }

            }
        }

        if (copilotExists) {
            File toolsConfigFile = new File(project.buildDir, COPILOT + File.separator + TOOLS_CONFIG_FILE)
            String toolDependencyFileName = getToolsDependenciesFileName(project)
            File toolsDependenciesFileMain = new File(project.buildDir, COPILOT + File.separator + toolDependencyFileName)
            def toolsConfigJson = new JsonSlurper().parseText(toolsConfigFile.readLines().join(" "))

            // Get tools in SOURCES
            if (moduleProject != null && false) {
                moduleProject.subprojects.each { subproject ->
                    File toolsDir = new File(subproject.projectDir, "tools")
                    if (toolsDir.exists() && !subproject.name.equals(COPILOT_MODULE)) {
                        project.copy {
                            from {
                                toolsDir.path
                            }
                            into "${project.buildDir.path}${File.separator}copilot${File.separator}tools"
                        }
                        toolsDir.listFiles().each { file ->
                            toolsConfigJson.third_party_tools[file.name.replaceFirst(~/\.[^\.]+$/, '')] = true
                        }
                        def json_data = JsonOutput.toJson(toolsConfigJson)
                        toolsConfigFile.write(JsonOutput.prettyPrint(json_data))
                        //lets read the Dependencies file of the subproject and add it to the main one
                        File toolsDependenciesFile = new File(subproject.projectDir, toolDependencyFileName)
                        if (toolsDependenciesFile.exists()) {
                            //add a line break
                            toolsDependenciesFileMain.append('\n')
                            toolsDependenciesFileMain.append(toolsDependenciesFile.text)
                            project.logger.info("Added dependencies from ${subproject.name} to main dependencies file")
                        }
                    }
                }
            }

            // Get tools in JARS
            if (false){
            jarModulesLocation.listFiles().each { jarModule ->
                File jarModuleToolsDir = new File(jarModule, "tools")
                if (jarModuleToolsDir.exists() && !jarModule.name.equals(COPILOT_MODULE)) {
                    project.copy {
                        from {
                            jarModuleToolsDir.path
                        }
                        into "${project.buildDir.path}${File.separator}copilot${File.separator}tools"
                    }
                    jarModuleToolsDir.listFiles().each { file ->
                        toolsConfigJson.third_party_tools[file.name.replaceFirst(~/\.[^\.]+$/, '')] = true
                    }
                    def json_data = JsonOutput.toJson(toolsConfigJson)
                    toolsConfigFile.write(JsonOutput.prettyPrint(json_data))
                    //lets read the Dependencies file of the subproject and add it to the main one
                    File toolsDependenciesFile = new File(jarModule, toolDependencyFileName)
                    if (toolsDependenciesFile.exists()) {
                        toolsDependenciesFileMain.append('\n')
                        toolsDependenciesFileMain.append(toolsDependenciesFile.text)
                        project.logger.info("Added dependencies from ${jarModule.name} to main dependencies file")
                    }
                }
            }   
            }   
        }
    }
}
task 'copilot.env.file' {
    dependsOn('copilot.build')
    doLast {
// edit the file gradle.properties and replace the . in key names with _ . Remember that the keys are the text before the = sign.
        // If there is a . in the value it not need to be replaced.
        project.logger.lifecycle("ðŸ¤– Creating Copilot Environment File")

        // open the file
        String projectFolder = projectDir.toString() + File.separator
        project.logger.lifecycle("ðŸ¤– Project Folder: $projectFolder")

        File file = new File(projectFolder + 'gradle.properties')
        // read the file and iterate over the lines, replace the . in the key names with _ and save in a new file
        File newFile = new File(projectFolder + 'build/copilot/copilot.properties')
        if (newFile.exists()) {
            newFile.delete()
        }
        newFile.createNewFile()
        // iterate over the lines and replace the . in the key names with _
        newFile.withWriter { writer ->
            file.eachLine { line ->
                if (line.contains(EQUAL)) {
                    String[] split = line.split(EQUAL, 2)
                    String key = split[0].replaceAll('\\.', '_')
                    String value = ''
                    if (split.length > 1) {
                        value = split[1]
                    }
                    writer.writeLine(key + EQUAL + value)
                } else {
                    writer.writeLine(line)
                }
            }
        }
    }
}
task 'copilot.restart' {
    dependsOn 'copilot.env.file'
    doLast {
        project.logger.lifecycle("ðŸ¤– Restarting Copilot")
        if(project.hasProperty("docker_com.etendoerp.copilot") ? project.property("docker_com.etendoerp.copilot").toBoolean() : false) {
           project.logger.lifecycle("ðŸ¤– Restarting Copilot using Docker")
            executeDockerComposeCommand("restart copilot")
        }
    }
}


afterEvaluate {

    tasks.named("smartbuild").configure { task ->
        task.finalizedBy("copilot.restart")
    }
    tasks.named("resources.up").configure { task ->
        task.dependsOn("copilot.env.file")
    }
}
